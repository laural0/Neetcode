package ValidSudoku;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

public class SolutionTest {

    private record TestCase(char[][] input, boolean output) {
    }

    private static Stream<TestCase> getTestCases() {
        return Stream.of(
                // Valid Sudoku - Case 1: Simple Valid Board
                new TestCase(
                        new char[][]{
                                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
                        },
                        true
                ),

                // Invalid Sudoku - Case 2: Duplicate in Row
                new TestCase(
                        new char[][]{
                                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '8'}  // Duplicate '8' in last row
                        },
                        false
                ),

                // Invalid Sudoku - Case 3: Duplicate in Column
                new TestCase(
                        new char[][]{
                                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '6', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '6', '.', '8', '.', '.', '7', '9'}  // Duplicate '6' in the 3rd column
                        },
                        false
                ),

                // Invalid Sudoku - Case 4: Duplicate in Sub-Grid
                new TestCase(
                        new char[][]{
                                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '.', '5'}  // Duplicate '5' in bottom-right sub-grid
                        },
                        false
                ),

                // Valid Sudoku - Case 5: Empty Board
                new TestCase(
                        new char[][]{
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
                        },
                        true
                ),

                // Invalid Sudoku - Case 6: Single Filled Cell (Invalid Sub-Grid)
                new TestCase(
                        new char[][]{
                                {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'5', '.', '.', '.', '.', '.', '.', '.', '.'}, // Duplicate '5' in the first sub-grid
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
                        },
                        false
                ),

                // Invalid Sudoku - Case 7: Duplicate in Sub-Grid
                new TestCase(
                        new char[][]{
                                {'1', '2', '.', '.', '3', '.', '.', '.', '.'},
                                {'4', '.', '.', '5', '.', '.', '.', '.', '.'},
                                {'.', '9', '1', '.', '.', '.', '.', '.', '3'},
                                {'5', '.', '.', '.', '6', '.', '.', '.', '4'},
                                {'.', '.', '.', '8', '.', '3', '.', '.', '5'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '.', '.', '.', '.', '.', '2', '.', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '8'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
                        },
                        false
                )
        );
    }

    @ParameterizedTest
    @MethodSource("getTestCases")
    public void testValidSudoku(TestCase testCase) {
        boolean result = new Solution().isValidSudoku(testCase.input);

        Assertions.assertThat(result).isEqualTo(testCase.output);
    }
}
